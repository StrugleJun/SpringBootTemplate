<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">

        <!--
                看下面这段，这段代码配置了通用Mapper的插件tk.mybatis.mapper.generator.MapperPlugin，
                该插件有一个必选的<property>属性mappers，这里的mappers和通用Mapper中的mappers配置含义一样，就是我们使用的通用Mapper接口，
                多个通用Mapper接口可以用逗号隔开。
        -->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true -->
            <property name="caseSensitive" value="true"/>
        </plugin>

        <!--
            生成注释
        -->
        <commentGenerator>
            <!--            suppressAllComments:阻止生成注释，默认为false-->
            <!--            suppressDate:阻止生成的注释包含时间戳，默认为false-->
            <property name="suppressAllComments" value="false"/>
            <property name="suppressDate" value="false"/>
        </commentGenerator>


        <!--
                下面这段是数据库配置信息，由于需要连接数据库，需要保证项目的classpath下面有数据库的JDBC驱动。
        -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/knowledge"
                        userId="root"
                        password="123456">
        </jdbcConnection>

        <!--
            这个元素的配置用来指定JDBC类型和Java类型如何转换。
        -->
        <javaTypeResolver>
            <!--            可以配置的属性为forceBigDecimals，该属性可以控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal,默认值为false，一般不需要配置。-->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!--
                下面这个配置是生成实体类的配置，是一个必须配置的内容。
        -->
        <javaModelGenerator targetPackage="cn.seem.springboottemplate.entity" targetProject="src\main\java">
            <!--            enableSubPackages:如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。-->
            <!--            trimStrings:是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样public void setUsername(String username) {this.username = username == null ? null : username.trim();}的setter方法。默认值为false。-->
            <property name="enableSubPackages" value="false"/>
            <property name="trimStrings" value="true"/>
            <!-- 是否对model添加 构造函数 true添加，false不添加-->
            <property name="constructorBased" value="false"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--
                再下面的sqlMapGenerator是一个可选的配置，配置后可以生成Mapper接口对应的XML文件。
        -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src\main\resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--
                再往下就是通用Mapper接口的配置，配置javaClientGenerator后会生成对应的接口文件，该接口会自动继承前面配置的通用Mapper接口。
        -->
        <javaClientGenerator targetPackage="cn.seem.springboottemplate.mapper" targetProject="src\main\java"
                             type="XMLMAPPER"/>

        <!--
                最后一个配置table,这里使用SQL通配符%来匹配所有表。generatedKey意味着所有的表都有一个id自增的主键，在生成实体类的时候会根据该配置生成相应的注解。
        -->
        <table catalog="knowledge" tableName="%" enableInsert="false" enableSelectByPrimaryKey="true"
               enableSelectByExample="false" enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false" enableDeleteByExample="false"
               enableCountByExample="false" enableUpdateByExample="false"
               selectByPrimaryKeyQueryId="false" selectByExampleQueryId="false">
            <property name="ignoreQualifiersAtRuntime" value="true"/>
            <generatedKey column="id" sqlStatement="Mysql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>
